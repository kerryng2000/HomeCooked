{"version":3,"sources":["../node_modules/ionicons/dist/esm-es5/shadow-css-a27537cf.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","_i","selector","content","suffix","contentPrefix","startsWith","blocks","substring","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","makeScopeMatcher","test","applyStrictSelectorScope","hostSelector","res","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy_1","before","colon","after","applySimpleSelectorScope","t","matches","match","safeContent","placeholders","index","keep","replaceBy","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part_1","slice","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","scopeCss","commentsWithHash","stripComments","orgSelectors","processCommentedSelector_1","placeholder","comment","scoped","forEach","_a"],"mappings":"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","file":"static/js/58.91d5215f.chunk.js","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n/*\r\n Stencil Client Platform v1.15.0 | MIT Licensed | https://stenciljs.com\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nvar safeSelector = function (selector) {\r\n    var placeholders = [];\r\n    var index = 0;\r\n    var content;\r\n    // Replaces attribute selectors with placeholders.\r\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\r\n        var replaceBy = \"__ph-\" + index + \"__\";\r\n        placeholders.push(keep);\r\n        index++;\r\n        return replaceBy;\r\n    });\r\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n    // WS and \"+\" would otherwise be interpreted as selector separators.\r\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\r\n        var replaceBy = \"__ph-\" + index + \"__\";\r\n        placeholders.push(exp);\r\n        index++;\r\n        return pseudo + replaceBy;\r\n    });\r\n    var ss = {\r\n        content: content,\r\n        placeholders: placeholders,\r\n    };\r\n    return ss;\r\n};\r\nvar restoreSafeSelector = function (placeholders, content) {\r\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) { return placeholders[+index]; });\r\n};\r\nvar _polyfillHost = '-shadowcsshost';\r\nvar _polyfillSlotted = '-shadowcssslotted';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nvar _polyfillHostContext = '-shadowcsscontext';\r\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\r\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\r\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\r\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\r\nvar _polyfillHostRe = /-shadowcsshost/gim;\r\nvar _colonHostRe = /:host/gim;\r\nvar _colonSlottedRe = /::slotted/gim;\r\nvar _colonHostContextRe = /:host-context/gim;\r\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nvar stripComments = function (input) {\r\n    return input.replace(_commentRe, '');\r\n};\r\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nvar extractCommentsWithHash = function (input) {\r\n    return input.match(_commentWithHashRe) || [];\r\n};\r\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nvar _curlyRe = /([{}])/g;\r\nvar OPEN_CURLY = '{';\r\nvar CLOSE_CURLY = '}';\r\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\r\nvar processRules = function (input, ruleCallback) {\r\n    var inputWithEscapedBlocks = escapeBlocks(input);\r\n    var nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\r\n        var m = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            m[_i] = arguments[_i];\r\n        }\r\n        var selector = m[2];\r\n        var content = '';\r\n        var suffix = m[4];\r\n        var contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        var cssRule = {\r\n            selector: selector,\r\n            content: content,\r\n        };\r\n        var rule = ruleCallback(cssRule);\r\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\r\n    });\r\n};\r\nvar escapeBlocks = function (input) {\r\n    var inputParts = input.split(_curlyRe);\r\n    var resultParts = [];\r\n    var escapedBlocks = [];\r\n    var bracketCount = 0;\r\n    var currentBlockParts = [];\r\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        var part = inputParts[partIndex];\r\n        if (part === CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part === OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    var strEscapedBlocks = {\r\n        escapedString: resultParts.join(''),\r\n        blocks: escapedBlocks,\r\n    };\r\n    return strEscapedBlocks;\r\n};\r\nvar insertPolyfillHostInCssText = function (selector) {\r\n    selector = selector\r\n        .replace(_colonHostContextRe, _polyfillHostContext)\r\n        .replace(_colonHostRe, _polyfillHost)\r\n        .replace(_colonSlottedRe, _polyfillSlotted);\r\n    return selector;\r\n};\r\nvar convertColonRule = function (cssText, regExp, partReplacer) {\r\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n    return cssText.replace(regExp, function () {\r\n        var m = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            m[_i] = arguments[_i];\r\n        }\r\n        if (m[2]) {\r\n            var parts = m[2].split(',');\r\n            var r = [];\r\n            for (var i = 0; i < parts.length; i++) {\r\n                var p = parts[i].trim();\r\n                if (!p)\r\n                    break;\r\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n            }\r\n            return r.join(',');\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n};\r\nvar colonHostPartReplacer = function (host, part, suffix) {\r\n    return host + part.replace(_polyfillHost, '') + suffix;\r\n};\r\nvar convertColonHost = function (cssText) {\r\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\r\n};\r\nvar colonHostContextPartReplacer = function (host, part, suffix) {\r\n    if (part.indexOf(_polyfillHost) > -1) {\r\n        return colonHostPartReplacer(host, part, suffix);\r\n    }\r\n    else {\r\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n    }\r\n};\r\nvar convertColonSlotted = function (cssText, slotScopeId) {\r\n    var slotClass = '.' + slotScopeId + ' > ';\r\n    var selectors = [];\r\n    cssText = cssText.replace(_cssColonSlottedRe, function () {\r\n        var m = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            m[_i] = arguments[_i];\r\n        }\r\n        if (m[2]) {\r\n            var compound = m[2].trim();\r\n            var suffix = m[3];\r\n            var slottedSelector = slotClass + compound + suffix;\r\n            var prefixSelector = '';\r\n            for (var i = m[4] - 1; i >= 0; i--) {\r\n                var char = m[5][i];\r\n                if (char === '}' || char === ',') {\r\n                    break;\r\n                }\r\n                prefixSelector = char + prefixSelector;\r\n            }\r\n            var orgSelector = prefixSelector + slottedSelector;\r\n            var addedSelector = \"\" + prefixSelector.trimRight() + slottedSelector.trim();\r\n            if (orgSelector.trim() !== addedSelector.trim()) {\r\n                var updatedSelector = addedSelector + \", \" + orgSelector;\r\n                selectors.push({\r\n                    orgSelector: orgSelector,\r\n                    updatedSelector: updatedSelector,\r\n                });\r\n            }\r\n            return slottedSelector;\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n    return {\r\n        selectors: selectors,\r\n        cssText: cssText,\r\n    };\r\n};\r\nvar convertColonHostContext = function (cssText) {\r\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\r\n};\r\nvar convertShadowDOMSelectors = function (cssText) {\r\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\r\n};\r\nvar makeScopeMatcher = function (scopeSelector) {\r\n    var lre = /\\[/g;\r\n    var rre = /\\]/g;\r\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n};\r\nvar selectorNeedsScoping = function (selector, scopeSelector) {\r\n    var re = makeScopeMatcher(scopeSelector);\r\n    return !re.test(selector);\r\n};\r\nvar applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\r\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n    _polyfillHostRe.lastIndex = 0;\r\n    if (_polyfillHostRe.test(selector)) {\r\n        var replaceBy_1 = \".\" + hostSelector;\r\n        return selector\r\n            .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\r\n            return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\r\n                return before + replaceBy_1 + colon + after;\r\n            });\r\n        })\r\n            .replace(_polyfillHostRe, replaceBy_1 + ' ');\r\n    }\r\n    return scopeSelector + ' ' + selector;\r\n};\r\nvar applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\r\n    var isRe = /\\[is=([^\\]]*)\\]/g;\r\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\r\n        var parts = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            parts[_i - 1] = arguments[_i];\r\n        }\r\n        return parts[0];\r\n    });\r\n    var className = '.' + scopeSelector;\r\n    var _scopeSelectorPart = function (p) {\r\n        var scopedP = p.trim();\r\n        if (!scopedP) {\r\n            return '';\r\n        }\r\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n        }\r\n        else {\r\n            // remove :host since it should be unnecessary\r\n            var t = p.replace(_polyfillHostRe, '');\r\n            if (t.length > 0) {\r\n                var matches = t.match(/([^:]*)(:*)(.*)/);\r\n                if (matches) {\r\n                    scopedP = matches[1] + className + matches[2] + matches[3];\r\n                }\r\n            }\r\n        }\r\n        return scopedP;\r\n    };\r\n    var safeContent = safeSelector(selector);\r\n    selector = safeContent.content;\r\n    var scopedSelector = '';\r\n    var startIndex = 0;\r\n    var res;\r\n    var sep = /( |>|\\+|~(?!=))\\s*/g;\r\n    // If a selector appears before :host it should not be shimmed as it\r\n    // matches on ancestor elements and not on elements in the host's shadow\r\n    // `:host-context(div)` is transformed to\r\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n    // Historically `component-tag:host` was matching the component so we also want to preserve\r\n    // this behavior to avoid breaking legacy apps (it should not match).\r\n    // The behavior should be:\r\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n    //   `:host-context(tag)`)\r\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n    var shouldScope = !hasHost;\r\n    while ((res = sep.exec(selector)) !== null) {\r\n        var separator = res[1];\r\n        var part_1 = selector.slice(startIndex, res.index).trim();\r\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\r\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\r\n        scopedSelector += scopedPart + \" \" + separator + \" \";\r\n        startIndex = sep.lastIndex;\r\n    }\r\n    var part = selector.substring(startIndex);\r\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n    // replace the placeholders with their original values\r\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\r\n};\r\nvar scopeSelector = function (selector, scopeSelectorText, hostSelector, slotSelector) {\r\n    return selector\r\n        .split(',')\r\n        .map(function (shallowPart) {\r\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\r\n            return shallowPart.trim();\r\n        }\r\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\r\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\r\n        }\r\n        else {\r\n            return shallowPart.trim();\r\n        }\r\n    })\r\n        .join(', ');\r\n};\r\nvar scopeSelectors = function (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\r\n    return processRules(cssText, function (rule) {\r\n        var selector = rule.selector;\r\n        var content = rule.content;\r\n        if (rule.selector[0] !== '@') {\r\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        var cssRule = {\r\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\r\n            content: content,\r\n        };\r\n        return cssRule;\r\n    });\r\n};\r\nvar scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\r\n    cssText = insertPolyfillHostInCssText(cssText);\r\n    cssText = convertColonHost(cssText);\r\n    cssText = convertColonHostContext(cssText);\r\n    var slotted = convertColonSlotted(cssText, slotScopeId);\r\n    cssText = slotted.cssText;\r\n    cssText = convertShadowDOMSelectors(cssText);\r\n    if (scopeId) {\r\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\r\n    }\r\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\r\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\r\n    return {\r\n        cssText: cssText.trim(),\r\n        slottedSelectors: slotted.selectors,\r\n    };\r\n};\r\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\r\n    var hostScopeId = scopeId + '-h';\r\n    var slotScopeId = scopeId + '-s';\r\n    var commentsWithHash = extractCommentsWithHash(cssText);\r\n    cssText = stripComments(cssText);\r\n    var orgSelectors = [];\r\n    if (commentOriginalSelector) {\r\n        var processCommentedSelector_1 = function (rule) {\r\n            var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\r\n            var comment = \"/*!@\" + rule.selector + \"*/\";\r\n            orgSelectors.push({ placeholder: placeholder, comment: comment });\r\n            rule.selector = placeholder + rule.selector;\r\n            return rule;\r\n        };\r\n        cssText = processRules(cssText, function (rule) {\r\n            if (rule.selector[0] !== '@') {\r\n                return processCommentedSelector_1(rule);\r\n            }\r\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n                rule.content = processRules(rule.content, processCommentedSelector_1);\r\n                return rule;\r\n            }\r\n            return rule;\r\n        });\r\n    }\r\n    var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\r\n    cssText = __spreadArrays([scoped.cssText], commentsWithHash).join('\\n');\r\n    if (commentOriginalSelector) {\r\n        orgSelectors.forEach(function (_a) {\r\n            var placeholder = _a.placeholder, comment = _a.comment;\r\n            cssText = cssText.replace(placeholder, comment);\r\n        });\r\n    }\r\n    scoped.slottedSelectors.forEach(function (slottedSelector) {\r\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\r\n    });\r\n    return cssText;\r\n};\r\nexport { scopeCss };\r\n"],"sourceRoot":""}